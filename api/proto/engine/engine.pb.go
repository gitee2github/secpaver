// Code generated by protoc-gen-go. DO NOT EDIT.
// source: engine.proto

package engine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Req struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EngineInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EngineInfo) Reset()         { *m = EngineInfo{} }
func (m *EngineInfo) String() string { return proto.CompactTextString(m) }
func (*EngineInfo) ProtoMessage()    {}
func (*EngineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{1}
}

func (m *EngineInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EngineInfo.Unmarshal(m, b)
}
func (m *EngineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EngineInfo.Marshal(b, m, deterministic)
}
func (m *EngineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineInfo.Merge(m, src)
}
func (m *EngineInfo) XXX_Size() int {
	return xxx_messageInfo_EngineInfo.Size(m)
}
func (m *EngineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EngineInfo proto.InternalMessageInfo

func (m *EngineInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EngineInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ListEngineAck struct {
	EngineInfos          []*EngineInfo `protobuf:"bytes,1,rep,name=engineInfos,proto3" json:"engineInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListEngineAck) Reset()         { *m = ListEngineAck{} }
func (m *ListEngineAck) String() string { return proto.CompactTextString(m) }
func (*ListEngineAck) ProtoMessage()    {}
func (*ListEngineAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{2}
}

func (m *ListEngineAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEngineAck.Unmarshal(m, b)
}
func (m *ListEngineAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEngineAck.Marshal(b, m, deterministic)
}
func (m *ListEngineAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEngineAck.Merge(m, src)
}
func (m *ListEngineAck) XXX_Size() int {
	return xxx_messageInfo_ListEngineAck.Size(m)
}
func (m *ListEngineAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEngineAck.DiscardUnknown(m)
}

var xxx_messageInfo_ListEngineAck proto.InternalMessageInfo

func (m *ListEngineAck) GetEngineInfos() []*EngineInfo {
	if m != nil {
		return m.EngineInfos
	}
	return nil
}

type InfoEngineAck struct {
	BaseInfo             *EngineInfo `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InfoEngineAck) Reset()         { *m = InfoEngineAck{} }
func (m *InfoEngineAck) String() string { return proto.CompactTextString(m) }
func (*InfoEngineAck) ProtoMessage()    {}
func (*InfoEngineAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{3}
}

func (m *InfoEngineAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoEngineAck.Unmarshal(m, b)
}
func (m *InfoEngineAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoEngineAck.Marshal(b, m, deterministic)
}
func (m *InfoEngineAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoEngineAck.Merge(m, src)
}
func (m *InfoEngineAck) XXX_Size() int {
	return xxx_messageInfo_InfoEngineAck.Size(m)
}
func (m *InfoEngineAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoEngineAck.DiscardUnknown(m)
}

var xxx_messageInfo_InfoEngineAck proto.InternalMessageInfo

func (m *InfoEngineAck) GetBaseInfo() *EngineInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Req)(nil), "engine.Req")
	proto.RegisterType((*EngineInfo)(nil), "engine.EngineInfo")
	proto.RegisterType((*ListEngineAck)(nil), "engine.ListEngineAck")
	proto.RegisterType((*InfoEngineAck)(nil), "engine.InfoEngineAck")
}

func init() { proto.RegisterFile("engine.proto", fileDescriptor_770b178c3aab763f) }

var fileDescriptor_770b178c3aab763f = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcd, 0x4b, 0xcf,
	0xcc, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x24, 0xb9, 0x98,
	0x83, 0x52, 0x0b, 0x85, 0x84, 0xb8, 0x58, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x38, 0x83, 0xc0, 0x6c, 0x25, 0x13, 0x2e, 0x2e, 0x57, 0xb0, 0x22, 0xcf, 0xbc, 0xb4, 0x7c, 0x90,
	0x8a, 0x3c, 0x24, 0x15, 0x20, 0x36, 0x48, 0x2c, 0x25, 0xb5, 0x38, 0x59, 0x82, 0x09, 0x22, 0x06,
	0x62, 0x2b, 0xb9, 0x72, 0xf1, 0xfa, 0x64, 0x16, 0x97, 0x40, 0x74, 0x3a, 0x26, 0x67, 0x0b, 0x99,
	0x70, 0x71, 0xa7, 0xc2, 0x8d, 0x29, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd2, 0x83,
	0xba, 0x06, 0x61, 0x43, 0x10, 0xb2, 0x32, 0x25, 0x7b, 0x2e, 0x5e, 0x10, 0x03, 0x61, 0x8c, 0x1e,
	0x17, 0x47, 0x52, 0x62, 0x31, 0x58, 0x16, 0xec, 0x06, 0xec, 0x66, 0xc0, 0xd5, 0x18, 0xe5, 0x73,
	0x71, 0x42, 0xc4, 0x7d, 0xd3, 0x8b, 0x84, 0x0c, 0xb8, 0xb8, 0x10, 0x8e, 0x12, 0xe2, 0x86, 0x69,
	0x0c, 0x4a, 0x2d, 0x94, 0x12, 0x85, 0x71, 0x50, 0x5d, 0x6d, 0xc0, 0xc5, 0x85, 0xb0, 0x1f, 0x87,
	0x0e, 0x14, 0x07, 0x26, 0xb1, 0x81, 0x03, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x56, 0x83,
	0x67, 0xdb, 0x68, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineMgrClient is the client API for EngineMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineMgrClient interface {
	ListEngine(ctx context.Context, in *Req, opts ...grpc.CallOption) (*ListEngineAck, error)
	InfoEngine(ctx context.Context, in *Req, opts ...grpc.CallOption) (*InfoEngineAck, error)
}

type engineMgrClient struct {
	cc *grpc.ClientConn
}

func NewEngineMgrClient(cc *grpc.ClientConn) EngineMgrClient {
	return &engineMgrClient{cc}
}

func (c *engineMgrClient) ListEngine(ctx context.Context, in *Req, opts ...grpc.CallOption) (*ListEngineAck, error) {
	out := new(ListEngineAck)
	err := c.cc.Invoke(ctx, "/engine.EngineMgr/ListEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineMgrClient) InfoEngine(ctx context.Context, in *Req, opts ...grpc.CallOption) (*InfoEngineAck, error) {
	out := new(InfoEngineAck)
	err := c.cc.Invoke(ctx, "/engine.EngineMgr/InfoEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineMgrServer is the server API for EngineMgr service.
type EngineMgrServer interface {
	ListEngine(context.Context, *Req) (*ListEngineAck, error)
	InfoEngine(context.Context, *Req) (*InfoEngineAck, error)
}

// UnimplementedEngineMgrServer can be embedded to have forward compatible implementations.
type UnimplementedEngineMgrServer struct {
}

func (*UnimplementedEngineMgrServer) ListEngine(ctx context.Context, req *Req) (*ListEngineAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEngine not implemented")
}
func (*UnimplementedEngineMgrServer) InfoEngine(ctx context.Context, req *Req) (*InfoEngineAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoEngine not implemented")
}

func RegisterEngineMgrServer(s *grpc.Server, srv EngineMgrServer) {
	s.RegisterService(&_EngineMgr_serviceDesc, srv)
}

func _EngineMgr_ListEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineMgrServer).ListEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.EngineMgr/ListEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineMgrServer).ListEngine(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineMgr_InfoEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineMgrServer).InfoEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.EngineMgr/InfoEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineMgrServer).InfoEngine(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _EngineMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.EngineMgr",
	HandlerType: (*EngineMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEngine",
			Handler:    _EngineMgr_ListEngine_Handler,
		},
		{
			MethodName: "InfoEngine",
			Handler:    _EngineMgr_InfoEngine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine.proto",
}
